spec:
  replicas: 1
  image:
    repository: quay.io/openshift/origin-metering-reporting-operator
    tag: latest
    pullPolicy: Always

  config:
    awsAccessKeyID: ""
    awsSecretAccessKey: ""
    awsCredentialsSecretName: reporting-operator-aws-credentials-secrets
    createAwsCredentialsSecret: true

    prometheusURL: ""
    prestoHost: "presto:8080"
    hiveHost: "hive-server:10000"

    prometheusMetricsImporterPollInterval: "5m"
    prometheusMetricsImporterChunkSize: "5m"
    prometheusMetricsImporterStepSize: "60s"

    prestoMaxQueryLength: null
    prometheusDatasourceMaxQueryRangeDuration: null
    prometheusDatasourceMaxImportBackfillDuration: null
    prometheusDatasourceImportFrom: null

    prometheusCertificateAuthority:
      # to use system CAs, set both to false
      useServiceAccountCA: true
      configMap:
        enabled: false
        create: false
        name: reporting-operator-certificate-authority-config
        filename: ""
        value: ""

    prometheusImporter:
      auth:
        useServiceAccountToken: true
        tokenSecret:
          enabled: false
          create: false
          name: reporting-operator-prometheus-bearer-secrets
          value: ""

    logLevel: "info"
    logReports: "false"
    logDDLQueries: "false"
    logDMLQueries: "false"
    disablePrometheusMetricsImporter: "false"

    enableFinalizers: "false"
    leaderLeaseDuration: "60s"

    allNamespaces: false
    targetNamespaces: []

    createClusterMonitoringViewClusterRoleBinding: true
    createClusterMonitoringViewClusterRole: true

    tls:
      enabled: false
      createSecret: false
      certificateData: null
      privateKeyData: null
      secretName: reporting-operator-api-tls-secrets

    metricsTLS:
      enabled: false
      createSecret: false
      certificateData: null
      privateKeyData: null
      secretName: reporting-operator-metrics-tls-secrets

  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "150Mi"
      cpu: "100m"

  updateStrategy:
    type: RollingUpdate

  readinessProbe:
   initialDelaySeconds: 60
   timeoutSeconds: 60
   periodSeconds: 60
   successThreshold: 1
   failureThreshold: 3
   httpGet:
     path: /ready
     port: 8080
     scheme: HTTP

  livenessProbe:
   initialDelaySeconds: 120
   timeoutSeconds: 60
   periodSeconds: 60
   successThreshold: 1
   failureThreshold: 5
   httpGet:
     path: /healthy
     port: 8080
     scheme: HTTP

  labels: {}
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  service:
    annotations: {}
    type: ClusterIP
    nodePort: null

  metricsService:
    annotations: {}

  route:
    enabled: false
    name: metering

  authProxy:
    enabled: false
    image:
      repository: openshift/oauth-proxy
      tag: v1.1.0
      pullPolicy: Always

    htpasswdSecretName: reporting-operator-auth-proxy-htpasswd
    createHtpasswdSecret: true
    htpasswdData: ""

    cookieSecretName: reporting-operator-auth-proxy-cookie-seed
    createCookieSecret: true
    cookieSeed: ""

    createAuthProxyClusterRole: true

    subjectAccessReviewPolicy: |-
      {"group": "metering.openshift.io", "resource": "reports", "namespace": "$(NAMESPACE)", "subresource": "export", "verb": "get"}
    delegateURLsPolicy: |-
      {"/": {"group": "metering.openshift.io", "resource": "reports", "namespace": "$(NAMESPACE)", "subresource": "export", "verb": "get"}}

    subjectAccessReviewEnabled: false
    delegateURLsEnabled: false
    authenticatedEmailsSecretName: reporting-operator-auth-proxy-authenticated-emails
    authenticatedEmailsEnabled: false
    createAuthenticatedEmailsSecret: true
    authenticatedEmailsData: ""

    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"
      limits:
        memory: "50Mi"
        cpu: "50m"
